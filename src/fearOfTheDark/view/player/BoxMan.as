package fearOfTheDark.view.player{		import Box2DAS.*;	import Box2DAS.Collision.*;	import Box2DAS.Collision.Shapes.*;	import Box2DAS.Common.*;	import Box2DAS.Dynamics.*;	import Box2DAS.Dynamics.Contacts.*;	import Box2DAS.Dynamics.Joints.*;		import cmodule.Box2D.*;		import extras.*;		import flash.display.*;	import flash.events.*;	import flash.geom.*;	import flash.text.*;	import flash.utils.*;		import misc.*;		import shapes.*;		import wck.*;		public class BoxMan extends Box {				public var contacts:ContactList;				public override function create():void {			reportBeginContact = true;			reportEndContact = true;			fixedRotation = true;			super.create();			listenWhileVisible(world, StepEvent.STEP, parseInput, false, 10);			listenWhileVisible(this, ContactEvent.BEGIN_CONTACT, handleContact);			contacts = new ContactList();			contacts.listenTo(this);		}				public function handleContact(e:ContactEvent):void {			var p:Pellet = e.other.m_userData as Pellet;			if(p) {				Util.addChildAtPosOf(world, new FX(), p);  				p.remove();			}			if(e.other.m_userData.name=="enemyRun")			{				trace(this.x);				this.x=45;				Util.setPos(e.currentTarget as DisplayObject,new Point(45,this.y));				trace("tste");			}		}				public function parseInput(e:Event):void {			var manifold:b2WorldManifold = null;			var dot:Number = -1;						// Search for the most ground/floor-like contact.			if(!contacts.isEmpty()) {				contacts.forEach(function(keys:Array, c:ContactEvent) {					var wm:b2WorldManifold = c.getWorldManifold();					if(wm.normal) { 												// Dot producting the contact normal with gravity indicates how floor-like the						// contact is. If the dot product = 1, it is a flat foor. If it is -1, it is						// a ceiling. If it's 0.5, it's a sloped floor. Save the contact manifold						// that is the most floor like.						var d:Number = wm.normal.dot(gravity);						if(!manifold || d > dot) {							manifold = wm;							dot = d;						}					}				});				contacts.clean();			}			var left:Boolean = Input.kd('A', 'LEFT');			var right:Boolean = Input.kd('D', 'RIGHT');			var jump:Boolean = Input.kp(' ', 'UP');			var v:V2;						// Here we could add a dot product threshold for disallowing the player from jumping			// off of walls, ceilings, etc. For example:			// if(jump && manifold && dot > 0) {			if(jump && manifold) {				v = manifold.normal.clone().multiplyN(-15);				b2body.ApplyImpulse(v, b2body.GetWorldCenter());			}			else if(left) {				b2body.SetAwake(true);				b2body.SetLinearVelocity(new V2(-2, b2body.GetLinearVelocity().y)) 				setTimeout(soltar, 50);				}			else if(right) {				b2body.SetAwake(true);				b2body.SetLinearVelocity(new V2(2, b2body.GetLinearVelocity().y)) 				setTimeout(soltar, 50);						}		}		private function soltar(){			b2body.SetLinearVelocity(new V2(0, b2body.GetLinearVelocity().y))		}	}}